plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'

}
// https://techblog.woowahan.com/2661/ jacoco 관련 reference
jacoco {
    toolVersion = "0.8.11"
}

test {
    useJUnitPlatform() // junit을 사용해 test를 한다.
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    // html, xml, csv 형식으로 report를 받을 수 있는데 그 옵션 설정
    reports {
        html.required = true
        xml.required = false
        csv.required = false
    }

    def Qdomains = []
    for(qPattern in "**/QA" .. "**/QZ") {
        Qdomains.add(qPattern+"*")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [] + Qdomains)
        }))
    }

    finalizedBy 'jacocoTestCoverageVerification'

}

jacocoTestCoverageVerification {
    def Qdomains = []
    // 패키지 + 클래스명 exclude Qdomain created by QueryDsl
    for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true // rule 활성화,비활성화 버튼
            element = 'CLASS' // rule 체크 단위 class
            // includes = []

            // 라인 커버리지 제한 설정
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0
            }

            // 브랜치 커버리지 제한 설정
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0
            }

//            // 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한
//            limit {
//                counter = 'LINE'
//                value = 'TOTALCOUNT'
//                maximum = 200
//            }


            excludes = [] + Qdomains // 제외할 Qdomains 패턴 추가
        }

    }
}

group = 'umc'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // jjwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    implementation 'com.google.firebase:firebase-admin:9.2.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

jar {
    enabled = false
}